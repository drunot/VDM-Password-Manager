class Password is subclass of GLOBAL
types
    public State = <Encrypted> | <PlainText>;
instance variables
    password: String;
    enqState: State;
    enqKey: OptEncryptionKey;
    userName: [String] := nil;
    matchData: [String] := nil;
    
inv enqState = <Encrypted> => enqKey <> nil;

operations

    public Password: String ==> Password
    Password(keyPhrase) ==
        (password := keyPhrase;
         enqState := <PlainText>;
         enqKey := nil;
        );

    public Password: String * String ==> Password
    Password(keyPhrase, match) ==
        (password := keyPhrase;
         enqState := <PlainText>;
         enqKey := nil;
         matchData := match;
        );

    public Password: String * String * String ==> Password
    Password(user, keyPhrase, match) ==
        (password := keyPhrase;
         enqState := <PlainText>;
         enqKey := nil;
         matchData := match;
         userName := user;
        );


    public pure GetEncryptionState: () ==> State
    GetEncryptionState() == return enqState;

    public static pure PasswordCompaire: Password * Password ==> bool
        PasswordCompaire(cmp1, cmp2) ==
            return cmp1.password = cmp2.password and cmp1.enqState = cmp2.enqState and cmp1.enqKey = cmp2.enqKey;

    public GetPasswordToken: () ==> token
        GetPasswordToken() ==
            return mk_token(password);

    public Encrypt: EncryptionKey_t ==> ()
    Encrypt(key) ==
    atomic (enqState := <Encrypted>;
     enqKey := key)
    pre enqState = <PlainText>
    post enqState = <Encrypted>;

    public Decrypt: EncryptionKey_t ==> ()
    Decrypt(key) ==
    if key = enqKey
    then 
        atomic (enqState := <PlainText>;
         enqKey := nil)         
    pre enqState = <Encrypted>
    post key = enqKey~ => enqState = <PlainText>;

    public GetUserName: () ==> [String]
    GetUserName() == return userName;

    public GetMatchString: () ==> [String]
        GetMatchString() == return matchData;


end Password 