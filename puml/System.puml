@startuml EncryptionKey

hide empty members
skinparam Shadowing false
skinparam linetype ortho
skinparam defaultTextAlignment center


class World
{
    -env: [Environment]
	+World() : World
	+Run()
}

class Environment {
    - Actions: <Login> | <Logout> | <FindPass> | <AddPass> | <RMPass> | <AuthDevice> | <NewDevice> | <FindUser> <<type>>
    - UserToCreate: (String * String * seq of (String * String * String)) <<type>>
    - ActionsToDo: ([Seconds] * [Actions] * (LoginArgs | LogoutArgs | FindPassArgs | AddPassArgs | RMPassArgs | AuthDeviceArgs | NewDeviceArgs | FindUserArgs)) <<type>>
    - LoginArgs: (String * nat) <<type>>
    - LogoutArgs: [nat] <<type>>
    - FindPassArgs: String <<type>>
    - AddPassArgs: (String * String * String) <<type>>
    - RMPassArgs: nat <<type>>
    - AuthDeviceArgs: nat <<type>>
    - NewDeviceArgs: nat <<type>>
    - FindUserArgs: String <<type>>
    - inline =(seq of UserToCreate * seq of ActionsToDo) <<type>>
    - users: UserDatabase
    - actions: seq of ActionsToDo
    - currentUser: [AccessManager]
    - devices: seq of Device_t
    - time: Time
    + Environment(): Environment
    + Run(): void
    - HandleLogin(args: LoginArgs): void
    - HandleLogout(args: LogoutArgs): void
    - HandleFindPass(match: FindPassArgs): void
    - HandleRMPass(idx: RMPassArgs): void
    - HandleNewDevice(-: NewDeviceArgs): void
    - HandleAuthDevice(idx: AuthDeviceArgs): void
    - HandleFindUser(userName: FindUserArgs): void
}

class GLOBAL
{
	+ String : seq of char <<type>>
	+ Seconds : nat <<type>>
	+ Device_t : Device <<type>>
	+ Password_t : Password <<type>>
	+ EncryptionKey_t : EncryptionKey <<type>>
	+ OptEncryptionKey : [EncryptionKey_t] <<type>>
	+ LockState : <Locked> | <Unlocked> <<type>>
	+ io : IO
}

    class Time {
        - currentTime: Seconds
        - updateObjects: seq of TimeObject
        - timeInstance : [Time]
        - Time(): Time
        + GetInstance(): Time
        + TickTime(amout: Seconds)
        + Register(obj: TimeObject)
        + GetCurrentTime(): Seconds
    }

    class TimeObject {
        + TimeTicked(currentTime: Seconds): void
    }

namespace PasswordManager {

    class Password {
        + State = <Encrypted> | <PlainText> <<type>>
        - password: String
        - enqState: State
        - enqKey: OptEncryptionKey
        - userName: [String]
        - matchData: [String]
        + Password(keyPhrase: String): Password
        + Password(keyPhrase: String, match: String): Password
        + Password(user: String, keyPhrase: String, match: String): Password
        + GetEncryptionState(): State
        + PasswordCompaire(cmp1: Password, cmp2: Password): bool
        + GetPasswordToken(): token
        + Encrypt(key: EncryptionKey_t): void
        + Decrypt(key: EncryptionKey_t): void
        + GetUserName(): [String]
        + GetMatchString(): [String]
        + PrintPassword(): void
    }

    class PasswordDatabase {
        - passwords: seq of Password
        - eqState: LockState
        + Unlock(encKey: EncryptionKey_t): void
        + Lock(encKey: EncryptionKey_t): void
        + GetLockState(): LockState
        + AddPassword(password: Password): void
        + GetAllPasswords(): seq of Password
        + FindPasswords(match: String): seq of Password
        + RemovePassword(idx: nat): void
    }

    class UserData {
        - userName: String
        - password: Password_t
        - userId: int
        - internalEncryptionKey: EncryptionKey
        - idCounter: int
        - allUsers: set of UserData
        + UserData(userNme: String, passwd: String): UserData
        + GetEncryptionKey(passwd: Password_t): EncryptionKey_t
        + IsCorrectPassword(pass: Password_t): bool
        + GetUserName(): String
        + ChangePassword(): String
    }

    class UserDatabase {
        - users: seq of AccessManager
        + FindUser(userName: String): [AccessManager]
        + AddUser(userName: String, password: String, device: Device_t): bool
    }

    class EncryptionKey
    {
        + keyToken : token
        + EncryptionKey(int, Password) : EncryptionKey
        + GetToken() : token
    }

    class Device {
        - deviceId: token
        - idCounter: int
        + Device(): Device
        + GetToken(): token
    }

    class AccessManager {
        - user: UserData
        - database: PasswordDatabase
        - acceptedDevices: set of Device_t
        - encKey: [EncryptionKey]
        - lastActiveTime: Seconds
        - curTime: Seconds
        - accessState: LockState
        - timeout: Seconds
    }

    .GLOBAL --down--|> UserDatabase
    .GLOBAL --down--|> UserData
    .GLOBAL --down--|> PasswordDatabase
    .GLOBAL --down--|> Password
    .GLOBAL --down--|> Device
    .TimeObject --down--|> AccessManager
    .Environment o--right-- UserDatabase
    .Environment o--right-- AccessManager
    UserDatabase o--down-- AccessManager
    AccessManager o--right-- UserData
    UserData o--down-- Password
    AccessManager o--left-- PasswordDatabase
    PasswordDatabase o--down-- Password
    AccessManager o--down-- Device
    AccessManager o--down-- EncryptionKey
    UserData o--down-- EncryptionKey
    Password o--down-- EncryptionKey
}
World o-- Environment
GLOBAL --down--|> TimeObject
GLOBAL --down--|> Time
Time o--down-- TimeObject
Environment o---- Time

@enduml