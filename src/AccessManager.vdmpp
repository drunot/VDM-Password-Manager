class AccessManager is subclass of TimeObject
    instance variables
        user: UserData;
        database: PasswordDatabase := new PasswordDatabase();
        acceptedDevices: set of Device_t := {};
        encKey: [EncryptionKey] := nil;
        lastActiveTime: Seconds := 0;
        curTime: Seconds := 0;
        accessState: LockState := <Unlocked>;
        static timeout: Seconds := 60 * 5;
operations

    public AccessManager: String * String * Device_t ==> AccessManager
    AccessManager(userName, password, dev) == 
        (user := new UserData(userName, password);
         Time`GetInstance().Register(self);
         encKey := user.GetEncryptionKey(new Password(password));
         AuthorizeDevice(dev);
         (dcl foo: bool; foo := Logout()));

    public Login: String * Device ==> bool
    Login(password, dev) == (
        if accessState = <Locked> then
        (if dev in set acceptedDevices then
        let pass = new Password(password) in
        (
            if user.IsCorrectPassword(pass) then
                let ek = user.GetEncryptionKey(pass) in
                (database.Unlock(ek);
                encKey := ek;
                accessState := <Unlocked> ;
                return true);
            io.print("User: ");io.print(GetUserName());
            io.print(", Login Failed: Wrong passoword.\n");
                
        ) else (io.print("User: ");
                io.print(GetUserName());
                io.print(", Login Failed: Device not authorized.\n")))
        else (io.print("User: ");
              io.print(GetUserName());
              io.print(", Login Failed: User already logged in.\n"));
        return false
    )
    post accessState = <Unlocked> => database.GetLockState() = <Unlocked>;

    public Logout: () ==> bool
    Logout() == 
            (if accessState = <Unlocked> then 
                (database.Lock(encKey);encKey:=nil; accessState := <Locked>; 
                return true); 
             io.print("User: ");
             io.print(GetUserName());
             io.print(", Logout Failed: User already logged out.\n"); 
            return false)
        post accessState = <Locked> and database.GetLockState() = <Locked>;
    public TimeTicked: Seconds ==> ()
    TimeTicked(currentTime) == (
        if encKey <> nil and lastActiveTime + timeout <= currentTime then
            (dcl foo: bool; foo := Logout();
             io.print("User: ");
             io.print(GetUserName());
             io.print(", Logged out! User was inactive for too long.\n"));
        curTime := currentTime
    )
    post currentTime = curTime and lastActiveTime <= curTime;

    public DoActivity: () ==> ()
    DoActivity() == lastActiveTime := curTime
    post lastActiveTime = curTime;

    public AuthorizeDevice: Device_t ==> ()
        AuthorizeDevice(dev) == acceptedDevices := acceptedDevices union {dev};

    public pure GetUserName: () ==> String
    GetUserName() == return user.GetUserName();
    
    public pure GetDatabase: () ==> [PasswordDatabase]
    GetDatabase() ==  (if database.GetLockState() = <Unlocked> then
    return database;
    return nil);

    public pure GetLoginState: () ==> LockState
    GetLoginState() == return accessState;

end AccessManager